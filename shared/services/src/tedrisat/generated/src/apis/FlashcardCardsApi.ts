/* tslint:disable */
/* eslint-disable */
/**
 * Tedrisat Service API
 * Education management service for Madrasah platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFlashcardDto,
  FlashcardResponse,
  UpdateFlashcardDto,
} from '../models/index';
import {
    CreateFlashcardDtoFromJSON,
    CreateFlashcardDtoToJSON,
    FlashcardResponseFromJSON,
    FlashcardResponseToJSON,
    UpdateFlashcardDtoFromJSON,
    UpdateFlashcardDtoToJSON,
} from '../models/index';

export interface CreateFlashcardsRequest {
    deckId: number;
    createFlashcardDto: Array<CreateFlashcardDto>;
}

export interface DeleteFlashcardRequest {
    id: number;
}

export interface GetFlashcardByIdRequest {
    id: number;
}

export interface ReplaceFlashcardRequest {
    id: number;
    createFlashcardDto: CreateFlashcardDto;
}

export interface UpdateFlashcardRequest {
    id: number;
    updateFlashcardDto: UpdateFlashcardDto;
}

/**
 * 
 */
export class FlashcardCardsApi extends runtime.BaseAPI {

    /**
     * Creates multiple flashcards within a specified deck. All cards will be assigned to the same deck and author.
     * Create multiple flashcards in a deck
     */
    async createFlashcardsRaw(requestParameters: CreateFlashcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlashcardResponse>>> {
        if (requestParameters['deckId'] == null) {
            throw new runtime.RequiredError(
                'deckId',
                'Required parameter "deckId" was null or undefined when calling createFlashcards().'
            );
        }

        if (requestParameters['createFlashcardDto'] == null) {
            throw new runtime.RequiredError(
                'createFlashcardDto',
                'Required parameter "createFlashcardDto" was null or undefined when calling createFlashcards().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/decks/{deckId}/cards`;
        urlPath = urlPath.replace(`{${"deckId"}}`, encodeURIComponent(String(requestParameters['deckId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createFlashcardDto']!.map(CreateFlashcardDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlashcardResponseFromJSON));
    }

    /**
     * Creates multiple flashcards within a specified deck. All cards will be assigned to the same deck and author.
     * Create multiple flashcards in a deck
     */
    async createFlashcards(requestParameters: CreateFlashcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlashcardResponse>> {
        const response = await this.createFlashcardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently deletes a flashcard by its ID. This action cannot be undone.
     * Delete a flashcard
     */
    async deleteFlashcardRaw(requestParameters: DeleteFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFlashcard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/cards/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently deletes a flashcard by its ID. This action cannot be undone.
     * Delete a flashcard
     */
    async deleteFlashcard(requestParameters: DeleteFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFlashcardRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific flashcard by its unique identifier
     * Get a single flashcard
     */
    async getFlashcardByIdRaw(requestParameters: GetFlashcardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFlashcardById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/cards/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific flashcard by its unique identifier
     * Get a single flashcard
     */
    async getFlashcardById(requestParameters: GetFlashcardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardResponse> {
        const response = await this.getFlashcardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces all properties of an existing flashcard with new values. This is a complete replacement operation.
     * Replace a flashcard completely
     */
    async replaceFlashcardRaw(requestParameters: ReplaceFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling replaceFlashcard().'
            );
        }

        if (requestParameters['createFlashcardDto'] == null) {
            throw new runtime.RequiredError(
                'createFlashcardDto',
                'Required parameter "createFlashcardDto" was null or undefined when calling replaceFlashcard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/cards/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlashcardDtoToJSON(requestParameters['createFlashcardDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardResponseFromJSON(jsonValue));
    }

    /**
     * Replaces all properties of an existing flashcard with new values. This is a complete replacement operation.
     * Replace a flashcard completely
     */
    async replaceFlashcard(requestParameters: ReplaceFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardResponse> {
        const response = await this.replaceFlashcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates specific properties of an existing flashcard. Only provided fields will be updated.
     * Update a flashcard partially
     */
    async updateFlashcardRaw(requestParameters: UpdateFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFlashcard().'
            );
        }

        if (requestParameters['updateFlashcardDto'] == null) {
            throw new runtime.RequiredError(
                'updateFlashcardDto',
                'Required parameter "updateFlashcardDto" was null or undefined when calling updateFlashcard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/cards/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFlashcardDtoToJSON(requestParameters['updateFlashcardDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardResponseFromJSON(jsonValue));
    }

    /**
     * Updates specific properties of an existing flashcard. Only provided fields will be updated.
     * Update a flashcard partially
     */
    async updateFlashcard(requestParameters: UpdateFlashcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardResponse> {
        const response = await this.updateFlashcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
