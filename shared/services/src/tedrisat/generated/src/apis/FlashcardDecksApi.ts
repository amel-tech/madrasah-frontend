/* tslint:disable */
/* eslint-disable */
/**
 * Tedrisat Service API
 * Education management service for Madrasah platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFlashcardDeckDto,
  FlashcardDeckResponse,
  ReplaceFlashcardDeckDto,
  UpdateFlashcardDeckDto,
} from '../models/index';
import {
    CreateFlashcardDeckDtoFromJSON,
    CreateFlashcardDeckDtoToJSON,
    FlashcardDeckResponseFromJSON,
    FlashcardDeckResponseToJSON,
    ReplaceFlashcardDeckDtoFromJSON,
    ReplaceFlashcardDeckDtoToJSON,
    UpdateFlashcardDeckDtoFromJSON,
    UpdateFlashcardDeckDtoToJSON,
} from '../models/index';

export interface CreateFlashcardDeckRequest {
    createFlashcardDeckDto: CreateFlashcardDeckDto;
}

export interface DeleteFlashcardDeckRequest {
    id: number;
}

export interface GetAllFlashcardDecksRequest {
    include?: Array<GetAllFlashcardDecksIncludeEnum>;
}

export interface GetFlashcardDeckByIdRequest {
    id: number;
    include?: Array<GetFlashcardDeckByIdIncludeEnum>;
}

export interface GetFlashcardDeckWithCardsRequest {
    id: number;
    include?: Array<GetFlashcardDeckWithCardsIncludeEnum>;
}

export interface ReplaceFlashcardDeckRequest {
    id: number;
    replaceFlashcardDeckDto: ReplaceFlashcardDeckDto;
}

export interface UpdateFlashcardDeckRequest {
    id: number;
    updateFlashcardDeckDto: UpdateFlashcardDeckDto;
}

/**
 * 
 */
export class FlashcardDecksApi extends runtime.BaseAPI {

    /**
     * Creates a new flashcard deck with the provided details. Tags can be optionally associated with the deck.
     * Create a new flashcard deck
     */
    async createFlashcardDeckRaw(requestParameters: CreateFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardDeckResponse>> {
        if (requestParameters['createFlashcardDeckDto'] == null) {
            throw new runtime.RequiredError(
                'createFlashcardDeckDto',
                'Required parameter "createFlashcardDeckDto" was null or undefined when calling createFlashcardDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/decks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlashcardDeckDtoToJSON(requestParameters['createFlashcardDeckDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardDeckResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new flashcard deck with the provided details. Tags can be optionally associated with the deck.
     * Create a new flashcard deck
     */
    async createFlashcardDeck(requestParameters: CreateFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardDeckResponse> {
        const response = await this.createFlashcardDeckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently deletes a flashcard deck by its ID. This action cannot be undone and will also remove all associated flashcards.
     * Delete a flashcard deck
     */
    async deleteFlashcardDeckRaw(requestParameters: DeleteFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFlashcardDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently deletes a flashcard deck by its ID. This action cannot be undone and will also remove all associated flashcards.
     * Delete a flashcard deck
     */
    async deleteFlashcardDeck(requestParameters: DeleteFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFlashcardDeckRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all flashcard decks with optional includes for related data such as tags and flashcards.
     * Get all flashcard decks
     */
    async getAllFlashcardDecksRaw(requestParameters: GetAllFlashcardDecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlashcardDeckResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/decks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlashcardDeckResponseFromJSON));
    }

    /**
     * Retrieves all flashcard decks with optional includes for related data such as tags and flashcards.
     * Get all flashcard decks
     */
    async getAllFlashcardDecks(requestParameters: GetAllFlashcardDecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlashcardDeckResponse>> {
        const response = await this.getAllFlashcardDecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single flashcard deck by its ID with optional includes for related data such as tags and flashcards.
     * Get flashcard deck by ID
     */
    async getFlashcardDeckByIdRaw(requestParameters: GetFlashcardDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardDeckResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFlashcardDeckById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardDeckResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single flashcard deck by its ID with optional includes for related data such as tags and flashcards.
     * Get flashcard deck by ID
     */
    async getFlashcardDeckById(requestParameters: GetFlashcardDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardDeckResponse> {
        const response = await this.getFlashcardDeckByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a flashcard deck by its ID with all flashcards automatically included, plus optional additional includes.
     * Get flashcard deck with cards
     */
    async getFlashcardDeckWithCardsRaw(requestParameters: GetFlashcardDeckWithCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardDeckResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFlashcardDeckWithCards().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/flashcard/decks/{id}/cards`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardDeckResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a flashcard deck by its ID with all flashcards automatically included, plus optional additional includes.
     * Get flashcard deck with cards
     */
    async getFlashcardDeckWithCards(requestParameters: GetFlashcardDeckWithCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardDeckResponse> {
        const response = await this.getFlashcardDeckWithCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces all properties of an existing flashcard deck with new values. This is a complete replacement operation.
     * Replace a flashcard deck completely
     */
    async replaceFlashcardDeckRaw(requestParameters: ReplaceFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlashcardDeckResponse>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling replaceFlashcardDeck().'
            );
        }

        if (requestParameters['replaceFlashcardDeckDto'] == null) {
            throw new runtime.RequiredError(
                'replaceFlashcardDeckDto',
                'Required parameter "replaceFlashcardDeckDto" was null or undefined when calling replaceFlashcardDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceFlashcardDeckDtoToJSON(requestParameters['replaceFlashcardDeckDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlashcardDeckResponseFromJSON));
    }

    /**
     * Replaces all properties of an existing flashcard deck with new values. This is a complete replacement operation.
     * Replace a flashcard deck completely
     */
    async replaceFlashcardDeck(requestParameters: ReplaceFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlashcardDeckResponse>> {
        const response = await this.replaceFlashcardDeckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates specific properties of an existing flashcard deck. Only provided fields will be updated.
     * Update a flashcard deck partially
     */
    async updateFlashcardDeckRaw(requestParameters: UpdateFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlashcardDeckResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFlashcardDeck().'
            );
        }

        if (requestParameters['updateFlashcardDeckDto'] == null) {
            throw new runtime.RequiredError(
                'updateFlashcardDeckDto',
                'Required parameter "updateFlashcardDeckDto" was null or undefined when calling updateFlashcardDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/flashcard/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFlashcardDeckDtoToJSON(requestParameters['updateFlashcardDeckDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlashcardDeckResponseFromJSON(jsonValue));
    }

    /**
     * Updates specific properties of an existing flashcard deck. Only provided fields will be updated.
     * Update a flashcard deck partially
     */
    async updateFlashcardDeck(requestParameters: UpdateFlashcardDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlashcardDeckResponse> {
        const response = await this.updateFlashcardDeckRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllFlashcardDecksIncludeEnum = {
    Tags: 'tags',
    Flashcards: 'flashcards',
    FlashcardsUserData: 'flashcards:user_data'
} as const;
export type GetAllFlashcardDecksIncludeEnum = typeof GetAllFlashcardDecksIncludeEnum[keyof typeof GetAllFlashcardDecksIncludeEnum];
/**
 * @export
 */
export const GetFlashcardDeckByIdIncludeEnum = {
    Tags: 'tags',
    Flashcards: 'flashcards',
    FlashcardsUserData: 'flashcards:user_data'
} as const;
export type GetFlashcardDeckByIdIncludeEnum = typeof GetFlashcardDeckByIdIncludeEnum[keyof typeof GetFlashcardDeckByIdIncludeEnum];
/**
 * @export
 */
export const GetFlashcardDeckWithCardsIncludeEnum = {
    Tags: 'tags',
    Flashcards: 'flashcards',
    FlashcardsUserData: 'flashcards:user_data'
} as const;
export type GetFlashcardDeckWithCardsIncludeEnum = typeof GetFlashcardDeckWithCardsIncludeEnum[keyof typeof GetFlashcardDeckWithCardsIncludeEnum];
