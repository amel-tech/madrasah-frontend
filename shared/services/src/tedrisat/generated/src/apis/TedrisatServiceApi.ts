/* tslint:disable */
/* eslint-disable */
/**
 * Tedrisat Service API
 * Education management service for Madrasah platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthCheckDto,
} from '../models/index';
import {
    HealthCheckDtoFromJSON,
    HealthCheckDtoToJSON,
} from '../models/index';

/**
 * 
 */
export class TedrisatServiceApi extends runtime.BaseAPI {

    /**
     * Returns the health status of the Tedrisat service
     * Health check
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckDtoFromJSON(jsonValue));
    }

    /**
     * Returns the health status of the Tedrisat service
     * Health check
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckDto> {
        const response = await this.getHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a greeting message from the Tedrisat service
     * Get hello message
     */
    async getHelloRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a greeting message from the Tedrisat service
     * Get hello message
     */
    async getHello(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getHelloRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a secure hello message from the Tedrisat service
     * Get secure hello message
     */
    async getSecureHelloRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/secure`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a secure hello message from the Tedrisat service
     * Get secure hello message
     */
    async getSecureHello(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getSecureHelloRaw(initOverrides);
        return await response.value();
    }

    /**
     * Test endpoint that throws a validation error for demonstration purposes
     * Throw a dummy error
     */
    async throwTestErrorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/throw-error`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test endpoint that throws a validation error for demonstration purposes
     * Throw a dummy error
     */
    async throwTestError(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.throwTestErrorRaw(initOverrides);
    }

}
