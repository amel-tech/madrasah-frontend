/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tedrisat Service API
 * Education management service for Madrasah platform
 * OpenAPI spec version: 1.0.0
 */
import type { CreateExampleDto, HealthCheckDto } from './'

import { customFetcher } from '../../core/client'
/**
 * Returns a greeting message from the Tedrisat service
 * @summary Get hello message
 */
export type appControllerGetHelloResponse200 = {
  data: string
  status: 200
}

export type appControllerGetHelloResponseComposite
  = appControllerGetHelloResponse200

export type appControllerGetHelloResponse
  = appControllerGetHelloResponseComposite & {
    headers: Headers
  }

export const getAppControllerGetHelloUrl = () => {
  return `/`
}

export const appControllerGetHello = async (
  options?: RequestInit,
): Promise<appControllerGetHelloResponse> => {
  return customFetcher<appControllerGetHelloResponse>(
    getAppControllerGetHelloUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * Returns the health status of the Tedrisat service
 * @summary Health check
 */
export type appControllerGetHealthResponse200 = {
  data: HealthCheckDto
  status: 200
}

export type appControllerGetHealthResponseComposite
  = appControllerGetHealthResponse200

export type appControllerGetHealthResponse
  = appControllerGetHealthResponseComposite & {
    headers: Headers
  }

export const getAppControllerGetHealthUrl = () => {
  return `/health`
}

export const appControllerGetHealth = async (
  options?: RequestInit,
): Promise<appControllerGetHealthResponse> => {
  return customFetcher<appControllerGetHealthResponse>(
    getAppControllerGetHealthUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Throw a dummy error
 */
export type appControllerThrowErrorResponse200 = {
  data: null
  status: 200
}

export type appControllerThrowErrorResponseComposite
  = appControllerThrowErrorResponse200

export type appControllerThrowErrorResponse
  = appControllerThrowErrorResponseComposite & {
    headers: Headers
  }

export const getAppControllerThrowErrorUrl = () => {
  return `/throw-error`
}

export const appControllerThrowError = async (
  options?: RequestInit,
): Promise<appControllerThrowErrorResponse> => {
  return customFetcher<appControllerThrowErrorResponse>(
    getAppControllerThrowErrorUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * Returns a secure hello message from the Tedrisat service
 * @summary Get secure hello message
 */
export type appControllerGetSecureHelloResponse200 = {
  data: string
  status: 200
}

export type appControllerGetSecureHelloResponseComposite
  = appControllerGetSecureHelloResponse200

export type appControllerGetSecureHelloResponse
  = appControllerGetSecureHelloResponseComposite & {
    headers: Headers
  }

export const getAppControllerGetSecureHelloUrl = () => {
  return `/secure`
}

export const appControllerGetSecureHello = async (
  options?: RequestInit,
): Promise<appControllerGetSecureHelloResponse> => {
  return customFetcher<appControllerGetSecureHelloResponse>(
    getAppControllerGetSecureHelloUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Get all examples
 */
export type exampleControllerGetAllExamplesResponse200 = {
  data: null
  status: 200
}

export type exampleControllerGetAllExamplesResponseComposite
  = exampleControllerGetAllExamplesResponse200

export type exampleControllerGetAllExamplesResponse
  = exampleControllerGetAllExamplesResponseComposite & {
    headers: Headers
  }

export const getExampleControllerGetAllExamplesUrl = () => {
  return `/examples`
}

export const exampleControllerGetAllExamples = async (
  options?: RequestInit,
): Promise<exampleControllerGetAllExamplesResponse> => {
  return customFetcher<exampleControllerGetAllExamplesResponse>(
    getExampleControllerGetAllExamplesUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Create a new example
 */
export type exampleControllerCreateExampleResponse201 = {
  data: null
  status: 201
}

export type exampleControllerCreateExampleResponseComposite
  = exampleControllerCreateExampleResponse201

export type exampleControllerCreateExampleResponse
  = exampleControllerCreateExampleResponseComposite & {
    headers: Headers
  }

export const getExampleControllerCreateExampleUrl = () => {
  return `/examples`
}

export const exampleControllerCreateExample = async (
  createExampleDto: CreateExampleDto,
  options?: RequestInit,
): Promise<exampleControllerCreateExampleResponse> => {
  return customFetcher<exampleControllerCreateExampleResponse>(
    getExampleControllerCreateExampleUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(createExampleDto),
    },
  )
}

/**
 * @summary Get example by ID
 */
export type exampleControllerGetExampleByIdResponse404 = {
  data: null
  status: 404
}

export type exampleControllerGetExampleByIdResponseComposite
  = exampleControllerGetExampleByIdResponse404

export type exampleControllerGetExampleByIdResponse
  = exampleControllerGetExampleByIdResponseComposite & {
    headers: Headers
  }

export const getExampleControllerGetExampleByIdUrl = (id: number) => {
  return `/examples/${id}`
}

export const exampleControllerGetExampleById = async (
  id: number,
  options?: RequestInit,
): Promise<exampleControllerGetExampleByIdResponse> => {
  return customFetcher<exampleControllerGetExampleByIdResponse>(
    getExampleControllerGetExampleByIdUrl(id),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Delete example by ID
 */
export type exampleControllerDeleteExampleResponse200 = {
  data: null
  status: 200
}

export type exampleControllerDeleteExampleResponseComposite
  = exampleControllerDeleteExampleResponse200

export type exampleControllerDeleteExampleResponse
  = exampleControllerDeleteExampleResponseComposite & {
    headers: Headers
  }

export const getExampleControllerDeleteExampleUrl = (id: number) => {
  return `/examples/${id}`
}

export const exampleControllerDeleteExample = async (
  id: number,
  options?: RequestInit,
): Promise<exampleControllerDeleteExampleResponse> => {
  return customFetcher<exampleControllerDeleteExampleResponse>(
    getExampleControllerDeleteExampleUrl(id),
    {
      ...options,
      method: 'DELETE',
    },
  )
}
